name: BobApp CI CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  front-end-tests:
    name: Front compile and test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: front

    strategy:
      matrix:
        node-version: ["^16.10.0"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Node.js (with cache)
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        id: karma
        run: |
          npm test -- --watch=false --browsers=ChromeHeadless --code-coverage
      - name: Get coverage values (with coverage targets)
        run: |
          lines=$(jq -r '.total.lines.pct' ./coverage/bobapp/coverage-summary.json)
          echo "lines: $lines"
          statements=$(jq -r '.total.statements.pct' ./coverage/bobapp/coverage-summary.json)
          echo "statements: $statements"
          functions=$(jq -r '.total.functions.pct' ./coverage/bobapp/coverage-summary.json)
          echo "functions: $functions"
          if (( $(echo "$lines <= ${{ vars.FRONT_COVERAGE_LINES_PERCENTAGE }}" | bc -l) )); then
            echo "❌ Coverage percentage for lines is less than ${{ vars.FRONT_COVERAGE_LINES_PERCENTAGE }}%."
            exit 1
          fi
          if (( $(echo "$statements <= ${{ vars.FRONT_COVERAGE_STATEMENTS_PERCENTAGE }}" | bc -l) )); then
            echo "❌ Coverage percentage for statements is less than ${{ vars.FRONT_COVERAGE_STATEMENTS_PERCENTAGE }}%."
            exit 1
          fi
          if (( $(echo "$functions <= ${{ vars.FRONT_COVERAGE_FUNCTIONS_PERCENTAGE }}" | bc -l) )); then
            echo "❌ Coverage percentage for functions is less than ${{ vars.FRONT_COVERAGE_FUNCTIONS_PERCENTAGE }}%."
            exit 1
          fi
          echo "✔️ Front coverage is ok :
            lines is more or equal to ${{ vars.FRONT_COVERAGE_LINES_PERCENTAGE }}%
            statements is more or equal to ${{ vars.FRONT_COVERAGE_STATEMENTS_PERCENTAGE }}%
            functions is more or equal to ${{ vars.FRONT_COVERAGE_FUNCTIONS_PERCENTAGE }}%"
      - name: Upload Karma coverage report
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-11-front-karma-report
          path: ./front/coverage/bobapp/
      - name: Cache lcov coverage report
        uses: actions/cache@v3
        with:
          path: front/coverage/bobapp/lcov.info
          key: ubuntu-front-lcov-${{ hashFiles('front/coverage/bobapp/lcov.info') }}
          restore-keys: ubuntu-front-lcov-

  back-end-tests:
    name: Back compile build and test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 11 (with cache)
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: "temurin"
          cache: "maven"
      - name: Test with Maven (compiles, builds, and runs unit tests)
        run: mvn -B test --file ./back/pom.xml
      - name: Upload Maven Surefire Reports
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-11-back-maven-surefire-report
          path: ./back/target/surefire-reports/
      - name: Test coverage with Jacoco (compiles, builds and verifies unit and integration tests with quality criteria)
        run: mvn -B verify --file ./back/pom.xml
      - name: Generate JaCoCo summary (with coverage targets)
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2
        with:
          jacoco-csv-file: ./back/target/site/jacoco/jacoco.csv
          generate-summary: true
          fail-if-coverage-less-than: ${{ vars.BACK_COVERAGE_PERCENTAGE }}
          fail-if-branches-less-than: ${{ vars.BACK_BRANCHES_PERCENTAGE }}
      - name: Log coverage percentages from summary
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "branches = ${{ steps.jacoco.outputs.branches }}"
      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-11-back-jacoco-report
          path: ./back/target/site/jacoco/

  front-end-sonarcloud:
    name: Front SonarCloud with quality gate
    runs-on: ubuntu-latest
    needs: front-end-tests
    defaults:
      run:
        working-directory: front

    strategy:
      matrix:
        node-version: ["^16.10.0"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Disable shallow clones (not part of Git history)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ubuntu-sonar-${{ hashFiles('~/.sonar/cache') }}
          restore-keys: ubuntu-sonar-
      - name: Front install dependencies
        run: npm ci
      - name: Cache lcov coverage report
        uses: actions/cache@v3
        with:
          path: front/coverage/bobapp/lcov.info
          key: ubuntu-front-lcov-${{ hashFiles('front/coverage/bobapp/lcov.info') }}
          restore-keys: ubuntu-front-lcov-
      - name: Front analyze with SonarCloud and quality gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        uses: sonarsource/sonarcloud-github-action@master
        with:
          projectBaseDir: front
          args: >
            -Dsonar.org.sonarsource.scanner.maven=sonar-maven-plugin:sonar
            -Dsonar.organization=lob2018
            -Dsonar.projectKey=BobApp_062023_front 
            -Dsonar.host.url=https://sonarcloud.io 
            -Dsonar.sources=src/
            -Dsonar.test.exclusions=tests/**
            -Dsonar.qualitygate.wait=true
            -Dsonar.javascript.lcov.reportPaths=coverage/bobapp/lcov.info

  back-end-sonarcloud:
    name: Back SonarCloud with quality gate
    runs-on: ubuntu-latest
    needs: back-end-tests
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Disable shallow clones (not part of Git history)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ubuntu-sonar-${{ hashFiles('~/.sonar/cache') }}
          restore-keys: ubuntu-sonar-
      - name: Back analyze with SonarCloud and quality gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify --file ./back/pom.xml org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.organization=lob2018 -Dsonar.host.url=https://sonarcloud.io -Dsonar.projectKey=BobApp_062023_back -Dsonar.qualitygate.wait=true

  front-end-docker:
    name: Front deploy to Docker Hub
    runs-on: ubuntu-latest
    needs: front-end-sonarcloud
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_LOB2018_USERNAME }}
          password: ${{ secrets.DOCKER_LOB2018_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./front
          file: ./front/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_LOB2018_USERNAME }}/front-bobapp:latest

  back-end-docker:
    name: Back deploy to Docker Hub
    runs-on: ubuntu-latest
    needs: back-end-sonarcloud
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_LOB2018_USERNAME }}
          password: ${{ secrets.DOCKER_LOB2018_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./back
          file: ./back/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_LOB2018_USERNAME }}/back-bobapp:latest
